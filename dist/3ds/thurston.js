import*as t from"three";import*as e from"dat.gui";import*as i from"stats";import*as n from"3ds";var r={d:(t,e)=>{for(var i in e)r.o(e,i)&&!r.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},o={};r.d(o,{q:()=>p});const s=(t=>{var e={};return r.d(e,t),e})({Clock:()=>t.Clock,Color:()=>t.Color,Matrix3:()=>t.Matrix3,Matrix4:()=>t.Matrix4,Quaternion:()=>t.Quaternion,Vector3:()=>t.Vector3,Vector4:()=>t.Vector4,WebGLRenderer:()=>t.WebGLRenderer});const a=(t=>{var e={};return r.d(e,t),e})({GUI:()=>e.GUI});const h=(t=>{var e={};return r.d(e,t),e})({default:()=>i.default});const d=(t=>{var e={};return r.d(e,t),e})({BasicRenderer:()=>n.BasicRenderer,ExpFog:()=>n.ExpFog,FlyControls:()=>n.FlyControls,PathTracerCamera:()=>n.PathTracerCamera,PathTracerRenderer:()=>n.PathTracerRenderer,Scene:()=>n.Scene,SphereCamera:()=>n.SphereCamera,bind:()=>n.bind});function c(t,e){return function(){return e.apply(t,arguments)}}s.Vector3.prototype.toLog=function(){return`[${this.x}, ${this.y}, ${this.z}]`},s.Vector4.prototype.toLog=function(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`},s.Matrix3.prototype.toLog=function(){let t="\r\n";for(let e=0;e<3;e++){for(let i=0;i<3;i++)0!==i&&(t+=",\t"),t+=this.elements[e+3*i];t+="\r\n"}return t},s.Matrix3.prototype.power=function(t){if(t<0)return this.invert().power(-t);if(0===t)return this.identity();if(1===t)return this;if(t%2==0)return this.power(t/2),this.multiply(this);{const e=this.clone();return this.power(t-1),this.multiply(e)}},s.Matrix3.prototype.makeRotation=function(t){const e=Math.cos(t),i=Math.sin(t);return this.set(e,-i,0,i,e,0,0,0,1),this},s.Matrix4.prototype.toLog=function(){let t="\r\n";for(let e=0;e<4;e++){for(let i=0;i<4;i++)0!==i&&(t+=",\t"),t+=this.elements[e+4*i];t+="\r\n"}return t},s.Matrix4.prototype.add=function(t){return this.set.apply(this,[].map.call(this.elements,(function(e,i){return e+t.elements[i]}))),this},s.Quaternion.prototype.toLog=function(){return`[${this.x}, ${this.y}, ${this.z}, ${this.w}]`},s.Quaternion.prototype.multiplyScalar=function(t){return this.set(t*this.x,t*this.y,t*this.z,t*this.w),this},s.Quaternion.prototype.add=function(t){return this.set(this.x+t.x,this.y+t.y,this.z+t.z,this.w+t.w),this};class l{constructor(t){this.thurston=t,this.state=0,this.dialogBoxWrap=document.getElementById("thurstonDialogBoxWrap"),this.downloadButton=document.getElementById("thurstonDownloadButton");const e=c(this,this.onPressP);window.addEventListener("keydown",e);const i=c(this,this.onClickGo);document.querySelector("#thurstonDialogBox input[type=submit]").addEventListener("click",i);const n=c(this,this.onClickDownload);document.getElementById("thurstonDownloadButton").addEventListener("click",n)}onPressP(t){if("p"===t.key)switch(this.state){case 0:document.getElementById("widthInput").value=window.innerWidth;document.getElementById("heightInput").value=window.innerHeight,this.dialogBoxWrap.classList.add("visible"),this.state=1;break;case 2:this.downloadButton.classList.remove("visible"),this.thurston.setSize(window.innerWidth,window.innerHeight),this.thurston.switchRenderer(),this.state=0;break;default:this.dialogBoxWrap.classList.remove("visible"),this.state=0}}onClickGo(t){if(1===this.state){const t=document.getElementById("widthInput"),e=document.getElementById("heightInput");this.thurston.setSize(t.value,e.value),this.thurston.ptCamera.aspect=t.value/e.value,this.thurston.ptCamera.updateProjectionMatrix(),this.dialogBoxWrap.classList.remove("visible"),this.downloadButton.classList.add("visible"),this.thurston.switchRenderer(),this.state=2}}onClickDownload(t){2===this.state&&(this.thurston.ptRenderer.renderAccTarget(),this.downloadButton.href=this.thurston.ptRenderer.domElement.toDataURL("image/png",1),this.downloadButton.download="export.png")}}const u="\n    #thurstonDialogBoxWrap {\n        margin: 0;\n        background: rgba(0, 0, 0, 0.8);\n        position: absolute;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        visibility: hidden;\n    }\n\n    #thurstonDialogBox {\n        background: #9b9b9b;\n        opacity: 1;\n        width: 300px;\n        margin-top: 100px;\n        margin-left: auto;\n        margin-right: auto;\n        padding: 20px;\n    }\n\n    #thurstonDownloadButton {\n        display: block;\n        position: fixed;\n        bottom: 0;\n        right: 0;\n        padding: 10px;\n        background: black;\n        color: white;\n        visibility: hidden;\n    }\n\n    #thurstonDialogBoxWrap.visible,\n    #thurstonDownloadButton.visible {\n        visibility: visible;\n    }\n";class p{constructor(t,e={}){this.set=t,this.callback=void 0;const i=new d.ExpFog(new s.Color(0,0,0),.07);this.scene=new d.Scene({fog:i}),this.camera=new d.SphereCamera({set:this.set}),this.ptCamera=new d.PathTracerCamera({set:this.set}),this.threeRenderer=new s.WebGLRenderer,this.threeRenderer.setClearColor(new s.Color(0,0,.2),1),document.body.appendChild(this.threeRenderer.domElement),this.renderer=new d.BasicRenderer(this.camera,this.scene,{},this.threeRenderer),this.ptRenderer=new d.PathTracerRenderer(this.ptCamera,this.scene,{},this.threeRenderer),this.currentRenderer=this.renderer,this.setSize(window.innerWidth,window.innerHeight),this._onWindowResize=(0,d.bind)(this,this.onWindowResize),window.addEventListener("resize",this._onWindowResize,!1),this.flyControls=new d.FlyControls(this.camera),this.clock=new s.Clock,this.stats=void 0,this.gui=void 0,this.pathTracerUI=void 0,this.onLoad()}onLoad(){const t=document.createElement("style");t.setAttribute("type","text/css"),t.textContent=u.trim(),document.head.appendChild(t),document.body.insertAdjacentHTML("beforeend",'\n<div id="thurstonDialogBoxWrap">\n    <div id="thurstonDialogBox">\n    <p>\n        Choose the resolution of the picture, and click on "Go".\n        You can download the image any time, with the "Download" button in the bottom right corner.\n        To leave the path tracer mode, hit \'p\'.\n    </p>\n        <form action="javascript:void(0);">\n            <label for="widthInput">Width :</label> <input id="widthInput" type="number"><br>\n            <label for="heightInput">Height:</label> <input id="heightInput" type="number"><br>\n            <input type="submit" value="Go!">\n        </form>\n    </div>\n</div>\n'),document.body.insertAdjacentHTML("beforeend",'\n<a id="thurstonDownloadButton" href="#">Download</a>\n')}setPixelRatio(t){this.renderer.setPixelRatio(t),this.ptRenderer.setPixelRatio(t)}setSize(t,e){this.renderer.setSize(t,e),this.ptRenderer.setSize(t,e)}initGUI(){this.gui=new a.GUI,this.gui.close(),this.gui.add({help:function(){window.open("https://3-dimensional.space")}},"help").name("Help/About");const t=this.gui.addFolder("Camera");return t.add(this.camera,"fov",45,120).name("Field of view"),t.add(this.camera,"maxDist",0,100,1).name("Max distance"),t.add(this.camera,"maxSteps",20,500,1).name("Max steps"),t.add(this.camera,"threshold").name("Threshold"),this}initStats(){return this.stats=new h.default,this.stats.showPanel(0),document.body.appendChild(this.stats.dom),this}initPathTracerUI(){this.pathTracerUI=new l(this)}add(t){this.scene.add(...arguments)}onWindowResize(t){this.renderer.setSize(window.innerWidth,window.innerHeight),this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix()}switchRenderer(){this.currentRenderer.isBasicRenderer?(this.flyControls.pause(),window.removeEventListener("resize",this._onWindowResize),this.ptCamera.position.copy(this.camera.position),this.ptRenderer.iFrame=0,this.threeRenderer.setRenderTarget(this.ptRenderer.accReadTarget),this.threeRenderer.clear(),this.currentRenderer=this.ptRenderer):(this.flyControls.restore(),window.addEventListener("resize",this._onWindowResize),this.setSize(window.innerWidth,window.innerHeight),this.camera.aspect=window.innerWidth/window.innerHeight,this.camera.updateProjectionMatrix(),this.currentRenderer=this.renderer)}animate(){const t=this.clock.getDelta();void 0!==this.callback&&this.callback(),this.flyControls.update(t),this.currentRenderer.render(),this.stats.update()}run(){this.initStats(),this.initGUI(),this.initPathTracerUI(),this.renderer.build(),this.ptRenderer.build();const t=(0,d.bind)(this,this.animate);this.threeRenderer.setAnimationLoop(t)}}var m=o.q;export{m as Thurston};