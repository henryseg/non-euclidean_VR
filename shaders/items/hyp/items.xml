<?xml version="1.0" encoding="UTF-8"?>
<library>
    <background>
        /**
        * Distance between two points
        */

        float modelDot(vec4 p, vec4 q){

        mat4 g=mat4(1,0,0,0,
        0,1,0,0,
        0,0,1,0,
        0,0,0,1);

        return dot(p,-g*q);

        }

        float dist(Point p1, Point p2){

        return acosh(modelDot(p1.coords,p2.coords));
        }


        Vector direction(Point p, Point q){
        float c=modelDot(p.coords,q.coords);
        vec4 dir=q.coords-c*p.coords;
        return geomNormalize(Vector(p,dir));

        }

        /**
        * Intensity of the light after travelling a length `len` in the direction `dir`
        * @param[in] dir unit vector at the light position
        * @param[in] len distance from the light
        * @return intensity of the light
        */
        float lightIntensity(float len){
        return 1.;//should change to 1./sinh(len);
        }
    </background>
    <items>
        <solid class="ball">
            <shader type="declare">
                Solid {{name}};
            </shader>
            <shader type="setup">
                {{name}} = {{toGLSL}};
            </shader>
            <shader type="sdf">
                Point loc = {{name}}.obj.loc;
                {{#global}}
                    loc = applyIsometry(v.invCellBoost, loc);
                {{/global}}
                return dist(v.local.pos, loc) - {{radius}};
            </shader>
            <shader type="gradient">
                Point loc = {{name}}.obj.loc;
                {{#global}}
                    loc = applyIsometry(v.invCellBoost, loc);
                {{/global}}

                Vector local = direction(v.local.pos,loc);
                local=negate(local);

                return RelVector(local, v.cellBoost, v.invCellBoost);
            </shader>
        </solid>




        <light class="pointLight">
            <shader type="declare">
                Light {{name}};
            </shader>
            <shader type="setup">
                {{name}} = {{toGLSL}};
            </shader>
            <shader type="direction">
                Point loc = {{name}}.obj.loc;
                Point pos = v.local.pos;
                {{#global}}
                    loc = applyIsometry(v.invCellBoost, loc);
                {{/global}}
                float dist=dist(loc,pos);
                intensities[0] = lightIntensity(dist);
                Vector local = direction(pos,loc);
                dirs[0] = RelVector(local, v.cellBoost, v.invCellBoost);
                return 1;
            </shader>
        </light>



    </items>
</library>
