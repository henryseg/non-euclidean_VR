<?xml version="1.0" encoding="UTF-8"?>
<library>
    <background>
        /**
         * Distance between two points
         */
        float dist(Point p1, Point p2){
            return length(p1.coords - p2.coords);
        }


        /**
         * Intensity of the light after travelling a length `len` in the direction `dir`
         * @param[in] dir unit vector at the light position
         * @param[in] len distance from the light
         * @return intensity of the light
         */
        float lightIntensity(float len){
            return 1./(len);
        }

    </background>
    <items>
        <solid class="ball">
            <shader type="declare">
                Solid {{name}};
            </shader>
            <shader type="setup">
                {{name}} = {{toGLSL}};
            </shader>
            <shader type="sdf">
                Point loc = {{name}}.item.loc;
                {{#global}}
                loc = applyIsometry(v.invCellBoost, loc);
                {{/global}}
                return dist(v.local.pos, loc) - {{radius}};
            </shader>
            <shader type="gradient">
                Point loc = {{name}}.item.loc;
                {{#global}}
                loc = applyIsometry(v.invCellBoost, loc);
                {{/global}}
                Vector local = Vector(v.local.pos, v.local.pos.coords - loc.coords);
                local =  geomNormalize(local);
                return RelVector(local, v.cellBoost, v.invCellBoost);
            </shader>
        </solid>

        <light class="pointLight">
            <shader type="declare">
                Light {{name}};
            </shader>
            <shader type="setup">
                {{name}} = {{toGLSL}};
            </shader>
            <shader type="direction">
                Point loc = {{name}}.item.loc;
                Point pos = v.local.pos;
                {{#global}}
                loc = applyIsometry(v.invCellBoost, loc);
                {{/global}}
                vec4 dir = loc.coords - pos.coords;
                intensities[0] = lightIntensity(length(dir));
                dir = normalize(dir);
                Vector local = Vector(pos, dir);
                dirs[0] = RelVector(local, v.cellBoost, v.invCellBoost);
                return 1;
            </shader>
        </light>
    </items>
</library>